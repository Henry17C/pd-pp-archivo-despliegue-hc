# docker compose down
#
# Para correr en segundo plano:
# docker compose up -d


services:
  dbserver:
    image: postgres:17.5-alpine3.22
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: labcom2015
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    #volumes:
    #  - "./pgdata:/var/lib/postgresql/data/pgdata"
    ports:
      - "54321:5432"
    expose:
      - 5432

  # Exportador de métricas de PostgreSQL para Prometheus
  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "dbserver:5432/postgres?sslmode=disable"
      DATA_SOURCE_USER: "postgres"
      DATA_SOURCE_PASSWORD: "labcom2015"
    expose:
      - 9187 # Exponer el puerto 9187 del contenedor a la red interna de Docker.


  consul:
    image: consul:1.15.4
    command: |
      agent -dev
      -ui
      -bind 0.0.0.0
      -client 0.0.0.0
    ports:
      - "8500:8500"
    expose:
      - 8500


  proxy:
    image: traefik:3.4.1
    command: |
      --api.insecure=true
      --api.dashboard=true
      --providers.consulCatalog
      --providers.consulCatalog.refreshInterval=5s
      --providers.consulCatalog.exposedByDefault=false
      --providers.consulCatalog.endpoint.address=consul:8500
      --entrypoints.http.address=":80"
      --entrypoints.metrics.address=":8082"
      --metrics.prometheus=true
      --metrics.prometheus.entryPoint=metrics
    ports:
      - "8888:8080" # Traefik dashboard
      - "8080:80"   # HTTP, host:contenedor
      - "8082:8082" # Metrics, host:contenedor
    expose:
      - 80 # Exponer el puerto 80 del contenedor a la red interna de Docker.
    depends_on:
      - consul


  authors:
    image: henry170/app-authors:latest
    environment:
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: labcom2015
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://dbserver:5432/postgres
      QUARKUS_HTTP_PORT: 8080
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
    ports:
      - "7070:8080"
    deploy:
      replicas: 1
    expose:
      - 8080
    depends_on:
      - dbserver
      - consul

    entrypoint: >
      sh -c "
      apk add --no-cache curl bash &&
      curl -o /usr/local/bin/wait-for-it https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh &&
      chmod +x /usr/local/bin/wait-for-it &&
      /usr/local/bin/wait-for-it dbserver:5432 -- java -jar /app/app.jar
      "


  books:
    image: henry170/app-books:latest
    environment:
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: labcom2015
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://dbserver:5432/postgres
      QUARKUS_HTTP_PORT: 8080
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      #AUTHORS_URL: http://authors3:8080
    ports:
      - "9091:8080" # host:contenedor
    deploy:
      replicas: 1
    expose:
      - 8080 # Exponer el puerto 8080 del contenedor a la red interna de Docker.
    depends_on:
      - dbserver
      - consul
    entrypoint: >
      sh -c "
      curl -o /usr/local/bin/wait-for-it https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh &&
      chmod +x /usr/local/bin/wait-for-it &&
      /usr/local/bin/wait-for-it dbserver:5432 -- java -jar /app/app.jar
      "
  

  customers:
    image: henry170/app-customers:latest
    environment:
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: labcom2015
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://dbserver:5432/postgres
      QUARKUS_HTTP_PORT: 8080
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
    ports:
      - "9999:8080" # host:contenedor (puerto externo para customers)
    deploy:
      replicas: 1
    expose:
      - 8080 # Exponer el puerto 8080 del contenedor a la red interna de Docker.
    depends_on:
      - dbserver
      - consul
    entrypoint: >
      sh -c "
      curl -o /usr/local/bin/wait-for-it https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh &&
      chmod +x /usr/local/bin/wait-for-it &&
      /usr/local/bin/wait-for-it dbserver:5432 -- java -jar /app/app.jar
      "



  prometheus:
    image: prom/prometheus:latest
    volumes:
      - "./configs:/etc/prometheus"
    ports:
      - "9090:9090"
    expose:
      - 9090


  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "33000:3000"
    expose:
      - 3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin


# Acceder a Grafana: http://localhost:33000
# Acceder a Prometheus: http://localhost:9090
# Acceder al dashboard de Traefik: http://localhost:8888
# Acceder a Consul: http://localhost:8500

        #URLS DE LAS APLICACIONES

# Acceder ala aplicación de autores: http://localhost:8080/app-authors/authors
# Acceder ala aplicación de libros: http://localhost:8080/app-books/books
# Acceder ala aplicación de clientes: http://localhost:8080/app-customers/orders/1




# Para prometheus, la URL es http://prometheus:9090




        # HEALTH CHECKS GENERALES
        #Health check general Authors	http://localhost:7070/q/health
        #Health check general Books	http://localhost:9091/q/health
        #Health check general Customers	http://localhost:9999/q/health


#   Health check para la aplicación:
#  http://localhost:8080/app-authors/q/health
#  http://localhost:8080/app-books/q/health
# http://localhost:8080/app-customers/q/health


  #Liveness	http://localhost:9091/q/health/live
  #Readiness	http://localhost:9091/q/health/ready
  #Startup	http://localhost:9091/q/health/started